<?php

namespace JG\CoreBundle\Repository;

use JG\CoreBundle\Entity\Application;
use JG\UserBundle\Entity\User;

/**
 * ApplicationRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ApplicationRepository extends \Doctrine\ORM\EntityRepository
{
    public function myApplicationsFromQB($user)
    {
        return $this
            ->createQueryBuilder('a')
            ->where('a.user = :user')
            ->setParameter('user', $user)
        ;
    }

    /**
     * @return Application[]
     */
    public function findMyApplications($user)
    {
        return $this
            ->createQueryBuilder('a')
            ->where('a.user = :user')
            ->setParameter('user', $user)
            ->getQuery()
            ->getResult()
        ;
    }

    /**
     * @return Application[]
     */
    public function findMyLastApplications($user)
    {
        return $this
            ->createQueryBuilder('a')
            ->where('a.user = :user')
            ->setParameter('user', $user)
            ->setMaxResults(3)
            ->getQuery()
            ->getResult()
        ;
    }

    public function countMyApplications($user)
    {
        return $this
            ->createQueryBuilder('a')
            ->select('COUNT(a)')
            ->where('a.user = :user')
            ->setParameter('user', $user)
            ->getQuery()
            ->getSingleScalarResult()
        ;
    }

    public function countMyApplicationsWithStatus($user, $status)
    {
        return $this
            ->createQueryBuilder('a')
            ->select('COUNT(a)')
            ->where('a.user = :user')
            ->andWhere('a.status = :status')
            ->setParameter('user', $user)
            ->setParameter('status', $status)
            ->getQuery()
            ->getSingleScalarResult()
        ;
    }

    public function countMyApplicationsWithContract($user, $contract)
    {
        return $this
            ->createQueryBuilder('a')
            ->select('COUNT(a)')
            ->where('a.user = :user')
            ->andWhere('a.contract = :contract')
            ->setParameter('user', $user)
            ->setParameter('contract', $contract)
            ->getQuery()
            ->getSingleScalarResult()
        ;
    }

    /**
     * @return Application[]
     */
    public function getApplicationsAfterDelay(User $user, \Datetime $date)
    {
//        var_dump($this->createQueryBuilder('a')
//            ->where('a.dateAt <= :date')
//            ->andWhere('a.user = :user')
//            ->andWhere('a.relaunches IS EMPTY')
//            ->andWhere('a.alerts IS EMPTY')
//            ->setParameter('date', $date)
//            ->setParameter('user', $user)
//            ->getQuery());
//        die('getQuery');
        return $this->createQueryBuilder('a')
            ->where('a.dateAt <= :date')
            ->andWhere('a.user = :user')
            ->andWhere('a.relaunches IS EMPTY')
            ->andWhere('a.alerts IS EMPTY')
            ->setParameter('date', $date)
            ->setParameter('user', $user)
            ->getQuery()
            ->getResult()
        ;
    }
}
